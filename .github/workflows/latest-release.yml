on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - 'main'
      - 'v*'
      - 'test-ci'

    paths:
      - 'KubeArmor/**'
      - 'tests/**'
      - 'protobuf/**'
      - '.github/workflows/latest-release.yml'

  create:
    branches:
      - 'v*'

name: Create KubeArmor release after testing the image

jobs:
  build:
    name: Create KubeArmor latest release - 20.04
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    env:
      RUNTIME: "containerd"
    steps:
      - name: Checkout KubeArmor code
        uses: actions/checkout@v2

      - name: Setup a Kubernetes enviroment
        id: vars
        run: |
          if [ ${{ github.ref }} == "refs/heads/main" ]; then
            echo ::set-output name=tag::latest
          else
            echo ::set-output name=tag::${GITHUB_REF#refs/*/}
          fi
          echo "RUNTIME="$RUNTIME
          ./contribution/k3s/install_k3s.sh

      - name: Install annotation controller
        run: |
          kubectl apply -f deployments/annotations/cert-manager.yaml
          kubectl wait pods --for=condition=ready -n cert-manager -l app.kubernetes.io/instance=cert-manager
          kubectl apply -f deployments/annotations/kubearmor-annotation-manager.yaml
          kubectl wait pods --for=condition=ready -n kube-system -l kubearmor-app=kubearmor-annotation-manager

      - name: Generate KubeArmor artifacts
        run: |
            GITHUB_SHA=$GITHUB_SHA ./KubeArmor/build/build_kubearmor.sh ${{ steps.vars.outputs.tag }}
            docker save kubearmor/kubearmor:${{ steps.vars.outputs.tag }} | sudo k3s ctr images import -

      - name: Run KubeArmor
        run: |
            sed -i 's/kubearmor\/kubearmor:latest/kubearmor\/kubearmor:${{ steps.vars.outputs.tag }}/g' ./KubeArmor/build/kubearmor-test-containerd.yaml
            kubectl apply -f ./KubeArmor/build/kubearmor-test-containerd.yaml
            kubectl get po -A
            kubectl wait --for=condition=ready --timeout=5m -n kube-system pod -l kubearmor-app=kubearmor

      - name: Test KubeArmor
        run: |
            aa-status
            kubectl get pod -A 
            kubectl describe pod -A
            ./tests/test-scenarios-github.sh ${{ steps.vars.outputs.tag }} || true
            kubectl logs -n kube-system $(kubectl get pod -n kube-system -o name --no-headers -l kubearmor-app=kubearmor-annotation-manager)

            exit 1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTHTOK }}

      - name: Push KubeArmor images to Docker
        run: |
            ./KubeArmor/build/push_kubearmor.sh ${{ steps.vars.outputs.tag }}

  push-stable-version:
    name: Create KubeArmor stable version release - 20.04
    needs: build
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-18.04
    timeout-minutes: 20
    steps:
      - name: Checkout KubeArmor code
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Pull Docker Hub image
        id: match
        run: |
            value=`cat STABLE-RELEASE`
            if [ ${{ github.ref }} == refs/heads/$value ]; then
              docker pull docker.io/kubearmor/kubearmor:$value
              docker image tag kubearmor/kubearmor:$value kubearmor/kubearmor:stable
              echo ::set-output name=tag::true
            else
              echo ::set-output name=tag::false
            fi

      - name: Login to Docker Hub
        if: steps.match.outputs.tag == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTHTOK }}

      - name: Push KubeArmor images to Docker
        if: steps.match.outputs.tag == 'true'
        run: |
              ./KubeArmor/build/push_kubearmor.sh stable
